{
  "effectors": {
    "argb.glsl": "//red(0,1,1)\n//green(0,1,1)\n//blue(0,1,1)\n//alpha(0,1,1)\n \nvoid argb(float alpha, float red, float green, float  blue) { \n\n\tcolor *= vec4 (red, green, blue, alpha); \n\n}",
    "rectangle.glsl": "//size(0,1,.1) \n//pos(0,1,0.5)\n//orientation(0,1,0.5) \n\nvoid rectangle(vec2 pos, vec2 size, float orientation) {\n\n\n\tuv = uv - pos - pos*size + size*0.5;\n\n\torientation = (orientation-.5)*6.2831853072;\n\t\n\tfloat c = cos(orientation);\n\tfloat s = sin(orientation);\n\t\n\tuv *= aspect_ratio;\n\tuv = vec2(uv.x * c - uv.y * s, uv.x * s + uv.y * c);\n\tuv *= 1./aspect_ratio;\n\t\n\tvec2 tuv = abs(uv) - size * 0.5;\n\tfloat dist = length(max(tuv, 0.0)) + min(max(tuv.x, tuv.y), 0.0);\n\n\tuv/=size;\n\n\tuv+=.5;\n\t\n\tcolor *= vec4(vec3(1.0 - step(0.0, dist)), 1.0);\n\n}",
    "flower.glsl": "//inratio(0,1,0)\n//shape(0,1,0)\n//petals(0,1,0)\n\nvoid flower(float inratio, float shape, float petals) {\n\n\tuv-=.5;\n\n\tfloat c = length(uv)+.5;\n\n\tfloat a = atan(uv.x,uv.y);//+iTime;\n\n\tfloat r = a * ((petals*29.)+3.);//  - rotation*3.14*2.;\n\n\tr = abs(fract(.5/3.14*r)-.5)*2.;\n\n\tr = pow(r,.5+pow(shape*2.,4.)); // petal type\n\n\tr = 1.-r*inratio*.5;//; // spikes out\n\n\tr = step(c,r);\n\n\tcolor *= vec4(r);\n\n}",
    "gradient.glsl": "void gradient(float exp, float angle) {\n\tangle *= 6.28318530718;\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tuv *= mat2(c, -s, s, c);\n\tuv += .5;\n\tuv += 1-exp*2;\n\tcolor *= vec4(uv.x);}",
    "burst.glsl": "void burst(float inratio, float shape, float petals) {\n\n\tuv -= .5;\n\n\tshape = 1-shape;\n\n\tfloat c = length(uv)+.5;\n\n\tfloat a = atan(uv.x,uv.y);//+iTime;\n\n\tfloat r = a * ((petals*29.)+3.);//\t- rotation*3.14*2.;\n\n\tr = abs(fract(.5/3.14*r)-.5)*2.; // equals : abs(mod(.5/3.14*r,1.)-.5); equals sdTriangle(a,petals);\n\n\tr = clamp(r*c*.9,0.,1.);\n\n\tr += (1.-inratio*2.); // gradient to white\n\n\tfloat zzz = shape*.4999;\n\tr = smoothstep(zzz,1.-zzz, r);\n\n\tr = mix(0.,1.,r);\n\n\tcolor *= r;\n\nuv += .5;\n\n}",
    "strobe.glsl": "//intensity(0,1,0)\n\nvoid strobe(float intensity) {\n\n\tcolor *= min(1,floor(mod(dynamic_ubo[0].eNGINE.frame,intensity*dynamic_ubo[0].eNGINE.fps)));\n\n}",
    "grid.glsl": "// columns(0,1,.1)\n// rows(0,1,.1)\n// thickness(0,1,.5)\n\nvoid grid(float columns, float rows, float thickness) {\n\n\t\n\tcolumns = clamp(columns*10., 0.5, 100.);\n\trows = clamp(rows*10., 0.5, 100.);\n\n\tcolumns = 1./(columns+(thickness*.5));\n\trows = 1./(rows+thickness*.5);\n\tfloat ar = aspect_ratio.x/aspect_ratio.y;\n\tfloat tx = thickness*min((rows/columns)/ar,1.);\n\tfloat ty = thickness*min((columns/rows)*ar,1.); \n\t\n\t\n\tuv = 1.-abs(uv-.5)*2.;\n\t\n\tfloat o = 1.;\n\n\to -= step(mod(uv.x,columns)/columns,tx);\n\to -= step(mod(uv.y,rows)/rows,ty);\n\t\n\tcolor -= vec4(o) ;\n\t\n\n}\n\n\n\n\n",
    "white.glsl": "void white() { color = vec4(1); }",
    "blank.glsl": "void blank() { color = vec4(0); }"
  },
  "main": {
    "layer1": { "type": "layer", "color": [ 1, 0, 1, 1 ], "models": { "rect1": { "dim": [ 100, 100 ], "q": "3x2", "effectors": [ "argb" ] } }, "effectors": [] },
    "layer2": { "type": "layer", "models": { "rect1": { "dim": [ 100, 100 ], "q": "3x2", "effectors": [ "argb" ] } }, "effectors": [] }
  },
  "inputs": {
    "artnet1": { "type": "artnet", "ip": "2.0.0.102", "remaps": { "remap1": { "universe": 1, "channel": 1, "destination": "layer1::rect1", "patch": [ 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0 ] }, "remap2": { "universe": 1, "channel": 101, "destination": "layer1::rect2", "patch": [ 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0 ] } } }
  },
  "outputs": {
    "HDMI 1": { "type": "monitor", "dim": [ 100, 100 ], "source": "layer1" },
    "NDI 1": { "type": "ndi", "dim": [ 100, 100 ], "source": "layer1" }
  },
  "editors": [
    [ "main::layer1", true ],
    [ "debug", true ],
    [ "effectors::rectangle", true ]
  ],
  "models": {},
  "layers": {}
}